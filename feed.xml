<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://limhyeonsu.github.io/</id><title>Hyeonsu Lim</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-05-15T23:21:45+09:00</updated> <author> <name>Lim Hyeonsu</name> <uri>https://limhyeonsu.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://limhyeonsu.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://limhyeonsu.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Lim Hyeonsu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>16. 계층쿼리</title><link href="https://limhyeonsu.github.io/posts/16.%EA%B3%84%EC%B8%B5%EC%BF%BC%EB%A6%AC/" rel="alternate" type="text/html" title="16. 계층쿼리" /><published>2023-05-14T23:15:37+09:00</published> <updated>2023-05-14T23:15:37+09:00</updated> <id>https://limhyeonsu.github.io/posts/16.%EA%B3%84%EC%B8%B5%EC%BF%BC%EB%A6%AC/</id> <content src="https://limhyeonsu.github.io/posts/16.%EA%B3%84%EC%B8%B5%EC%BF%BC%EB%A6%AC/" /> <author> <name>Lim Hyeonsu</name> </author> <category term="BOOK" /> <category term="불친절한 SQL 프로그래밍" /> <summary> 계층 쿼리를 사용하면 순환 관계를 가진 데이터를 조회할 수 있다. 순환 관계는 노드와 노드의 관계를 통해 만들어진다. 일반적으로 하나의 부모 노드는 다수의 자식 노드를 가질 수 있고, 하나의 자식 노드는 하나의 부모 노드만 가질 수 있다. 노드는 부모 노드와 자식 노드의 존재 여부에 따라 루트 노드, 브랜치 노드, 리프 노드로 구분할 수 있다. 순환 관계는 계층의 깊이에 따라 레벨이 부여 된다. 루트 노드는 레벨이 1이고, 계층이 전개될수록 레벨이 1씩 증가한다. -- JONES의 자식 노드 조회 SELECT b.empno, b.ename, b.mgr FROM emp a, emp b WHERE a.ename = 'JONES' AND b.mgr = a.empno; -- JONES의 자식 노드의 자... </summary> </entry> <entry><title>15. Top-N 쿼리</title><link href="https://limhyeonsu.github.io/posts/15.Top-N%EC%BF%BC%EB%A6%AC/" rel="alternate" type="text/html" title="15. Top-N 쿼리" /><published>2023-05-13T22:55:37+09:00</published> <updated>2023-05-14T23:35:13+09:00</updated> <id>https://limhyeonsu.github.io/posts/15.Top-N%EC%BF%BC%EB%A6%AC/</id> <content src="https://limhyeonsu.github.io/posts/15.Top-N%EC%BF%BC%EB%A6%AC/" /> <author> <name>Lim Hyeonsu</name> </author> <category term="BOOK" /> <category term="불친절한 SQL 프로그래밍" /> <summary> Top-N 쿼리는 상위 N개의 행을 조회하는 쿼리이다. 15.1 기본 문법 오라클에서는 세 가지 방식의 Top-N 쿼리를 사용할 수 있다. 15.1.1 ROWNUM 방식 ROWNUM 방식은 전통적인 Top-N 쿼리 방식이다. ORDER BY 절로 행을 정렬하고, 정렬된 행을 ROWNUM 슈도 칼럼으로 제한한다. 행이 반환되는 순서대로 순번을 반환하고, 행이 반환될 때마다 순번이 증가한다. -- ROWNUM은 1부터 시작하고 행이 반환될 때마다 순번이 증가하기 때문에 ROWNUM = 2 조건은 항상 FALSE이다. SELECT empno, sal, ROWNUM AS rn FROM emp WHERE ROWNUM = 2; -- ROWNUM 컬럼은 &amp;lt; 조건이나 &amp;lt;= 조건을 사용해야 한다. S... </summary> </entry> <entry><title>09. 면접문제</title><link href="https://limhyeonsu.github.io/posts/09.%EB%A9%B4%EC%A0%91%EB%AC%B8%EC%A0%9C/" rel="alternate" type="text/html" title="09. 면접문제" /><published>2023-04-01T22:14:48+09:00</published> <updated>2023-05-11T22:17:04+09:00</updated> <id>https://limhyeonsu.github.io/posts/09.%EB%A9%B4%EC%A0%91%EB%AC%B8%EC%A0%9C/</id> <content src="https://limhyeonsu.github.io/posts/09.%EB%A9%B4%EC%A0%91%EB%AC%B8%EC%A0%9C/" /> <author> <name>Lim Hyeonsu</name> </author> <category term="BOOK" /> <category term="코딩 인터뷰 완전분석" /> <summary> 01. 배열과 문자열 배열이나 문자열에 대한 문제들은 서로 대체 가능하다. 해시 테이블 해시테이블을 효율적인 탐색을 위한 자료구조로서 키(key)를 값에 대응시킨다. 간단한 해시 테이블을 구현하기 위해선 연결리스트와 해시 코드 함수만 있으면 된다. 키와 값을 해시테이블에 넣을때는 다음의 과정을 거친다. 처음에 키의 해시 코드를 계산한다.(키의 자료형은 보통 int, long이 된다. 키의 개수는 무한대지만 int의 개수는 유한하므로 서로 다른 두 개의 키가 같은 해시 코드를 가리킬 수 있다.) hash(key) % array.length와 같은 방식으로 해시 코드를 이용해서 배열의 인덱스를 구한다.(서로 다른 해시코드가 같은 인덱스를 가리킬 수 있다.) 배열의 각 인덱스에는 키와 값으로 ... </summary> </entry> <entry><title>08. 합격한뒤에</title><link href="https://limhyeonsu.github.io/posts/08.%ED%95%A9%EA%B2%A9%ED%95%9C%EB%92%A4%EC%97%90/" rel="alternate" type="text/html" title="08. 합격한뒤에" /><published>2023-03-27T22:44:37+09:00</published> <updated>2023-03-27T22:44:37+09:00</updated> <id>https://limhyeonsu.github.io/posts/08.%ED%95%A9%EA%B2%A9%ED%95%9C%EB%92%A4%EC%97%90/</id> <content src="https://limhyeonsu.github.io/posts/08.%ED%95%A9%EA%B2%A9%ED%95%9C%EB%92%A4%EC%97%90/" /> <author> <name>Lim Hyeonsu</name> </author> <category term="BOOK" /> <category term="코딩 인터뷰 완전분석" /> <summary> 면접이 끝나고 입사 제안을 받으면 그 제안을 어떻게 검토할 것인지, 그리고 협상은 어떻게 해야하는지 살펴보자 합격 또는 거절 통지에 대처하는 요령 입사 결정 기한과 연장 : 회사가 입사 제안을 하는 경우 보통 정해진 경우가 있다.(1~4주) 입사 제안 거절 : 공손한 어투로 입사 제안을 거절하자, 공격적이지 않고 명백한 이유를 대는 것이 좋다. 탈락 통보 대처 : 탈락 통보를 받게 되면 이를 재지원하는 기회로 만드는 것이 좋다. 또 구인 담당자에게 피드백을 공유해달라고 요청해볼 수도 있다. 입사 제안 평가 입사 제안을 검토할 때 고려해야 할 것들은 다음과 같다. 재정 관련 사항 입사 제안 검토시 가장 큰 실수는 연봉에만 지나치게 연연하는 것일 것이다. 연봉 외에 고려해야할 사항은 ... </summary> </entry> <entry><title>07. 기술적 문제</title><link href="https://limhyeonsu.github.io/posts/07.%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%AC%B8%EC%A0%9C/" rel="alternate" type="text/html" title="07. 기술적 문제" /><published>2023-03-21T21:01:37+09:00</published> <updated>2023-03-25T23:26:40+09:00</updated> <id>https://limhyeonsu.github.io/posts/07.%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%AC%B8%EC%A0%9C/</id> <content src="https://limhyeonsu.github.io/posts/07.%EA%B8%B0%EC%88%A0%EC%A0%81-%EB%AC%B8%EC%A0%9C/" /> <author> <name>Lim Hyeonsu</name> </author> <category term="BOOK" /> <category term="코딩 인터뷰 완전분석" /> <summary> 준비하기 많은 지원자들이 공부를 한답시고 문제와 답을 읽기만 하곤 한다. 문제는 직접 푸는 훈련을 해야한다. 답을 외우는 것은 도움이 되지 않는다. 문제를 만날때마다 다음과 같이 행동하자 직접 풀도록 노력하라 : 문제에 힌트가 주어지긴 하지만 직접 답을 찾으려고 노력하자. 문제를 풀 때는 공간과 시간 효율에 대해서도 반드시 생각하자 코드를 종이에 적으라 : IDE를 이용하면 코드 문법 강조, 자동완성, 디버거가 갖춰진 편리한 환경에서 코딩할 수 있다. 종이에 코딩하게 되면 그런 도움을 받을 수 없다. 실제 면접에서도 마찬가지다. 코드를 테스트하라 : 물론 종이에서, 기본 조건, 오류 발생 조건 등을 전부 테스트 하라 종이에 적은 코드를 그대로 컴퓨터로 옮긴 뒤 실제로 실행해 보라 : 종... </summary> </entry> </feed>
